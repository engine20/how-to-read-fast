{"version":3,"sources":["components/Settings.js","components/DisplayTexts/StaticElements.js","components/generic/Inputfield.js","components/DisplayTexts/Entryfield.js","components/DisplayTexts/component.js","img/Settings.png","components/App.js","index.js"],"names":["settings","Map","SetSetting","Setting","Value","set","GetSetting","get","StaticElements","ControlsBox","styled","div","Text","h1","Key","kbd","Inputfield","handleSubmit","input","setinput","onSubmit","className","css","type","name","id","autoComplete","required","tabIndex","value","onChange","e","target","htmlFor","onMouseDown","Entryfield","props","state","SetInput","bind","i","this","setState","event","preventDefault","SetText","hidelable","React","Component","DisplayText","text","index","focus","editprogress","overwriteprogress","words","setIndex","setText","setFocused","progressfocused","handleprogresskeyevent","progressblurred","setIndexbyPercent","t","split","filter","item","f","Math","floor","length","keyCode","key","substr","document","activeElement","blur","parseInt","forceUpdate","Currentword","NextWord","Progress","delay","wpm","cyclewords","counter","setInterval","min","stopcycle","clearInterval","onKeyDown","repeat","max","onKeyUp","onFocus","onBlur","progress","Settingspage","lazy","App","inSettings","ToggleSettings","injectGlobal","src","Settingsimg","alt","height","width","fallback","ReactDOM","render","StrictMode","getElementById","reportWebVitals"],"mappings":"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","file":"static/js/main.b0339fd1.chunk.js","sourcesContent":["const settings = new Map([\r\n  [\"text\", \"\"],\r\n  [\"index\", 0],\r\n  [\"Entryfield\", new Map([[\"input\", \"\"]])],\r\n  [\r\n    \"theme\",\r\n    new Map([\r\n      [\"bg\", \"#081119\"], //#081119\r\n      [\"textbox\", \"#16212a\"], //#16212a\r\n      [\"textprimary\", \"#7ebab5\"], //#7ebab5\r\n      [\"textsecondary\", \"#0c171f\"], //#0c171f\r\n      [\"texttertiary\", \"#12444d\"], //#12444d\r\n    ]),\r\n  ],\r\n]);\r\n\r\nexport const SetSetting = (Setting, Value) => {\r\n  settings.set(Setting, Value);\r\n};\r\nexport const GetSetting = (Setting) => {\r\n  return settings.get(Setting);\r\n};\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { GetSetting } from \"../Settings\";\r\n\r\nconst StaticElements = () => {\r\n  const ControlsBox = styled.div`\r\n    background: transparent;\r\n    width: 300px;\r\n    height: 150px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    border-radius: 10px;\r\n    border: 2px solid #213138;\r\n    margin-top: 4rem;\r\n    margin-left: -5rem;\r\n    padding: 0.2rem 1rem 0.7rem 1rem;\r\n  `;\r\n\r\n  const Text = styled.h1`\r\n    color: ${GetSetting(\"theme\").get(\"texttertiary\")};\r\n    font-family: \"Cabin\", sans-serif;\r\n    font-size: 1.15rem;\r\n  `;\r\n\r\n  const Key = styled.kbd`\r\n    border-radius: 7px;\r\n    padding: 0px 5px 0;\r\n    border: 3px solid ${GetSetting(\"theme\").get(\"texttertiary\")};\r\n  `;\r\n\r\n  return (\r\n    <ControlsBox>\r\n      <Text>\r\n        Press <Key>SPACE</Key> to cycle\r\n      </Text>\r\n      <Text>\r\n        Press <Key>CTRL</Key> to go back one word\r\n      </Text>\r\n      <Text>\r\n        Press <Key>BACKSPACE</Key> to return to start\r\n      </Text>\r\n    </ControlsBox>\r\n  );\r\n};\r\n\r\nexport default StaticElements;\r\n","import React, { useState } from \"react\";\r\nimport { SetSetting, GetSetting } from \"../Settings\";\r\nimport { css, cx } from \"@emotion/css\";\r\n\r\nconst Inputfield = ({ handleSubmit, input, setinput }) => {\r\n  return (\r\n    <form\r\n      onSubmit={handleSubmit}\r\n      className={css`\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: flex-start;\r\n        padding: 10rem;\r\n      `}\r\n    >\r\n      <input\r\n        type=\"input\"\r\n        name=\"text\"\r\n        id=\"text\"\r\n        autoComplete=\"off\"\r\n        required\r\n        tabIndex=\"0\"\r\n        value={input}\r\n        onChange={(e) => setinput(e.target.value)}\r\n        className={css`\r\n          border: 0;\r\n          border-bottom: 3px solid ${GetSetting(\"theme\").get(\"texttertiary\")};\r\n          outline: 0;\r\n          color: ${GetSetting(\"theme\").get(\"textprimary\")};\r\n          padding: 7px 0;\r\n          background: transparent;\r\n          font-family: \"Cabin\", sans-serif;\r\n          font-size: 2.5rem;\r\n          transition: 0.2s;\r\n          width: 25rem;\r\n\r\n          &:focus {\r\n            border-bottom: 3px solid ${GetSetting(\"theme\").get(\"textprimary\")};\r\n            width: 35rem;\r\n          }\r\n\r\n          &:required,\r\n          &:invalid + #Inputlable {\r\n            font-size: 2.5rem;\r\n\r\n            transform: translateY(0);\r\n          }\r\n\r\n          &:focus + #Inputlable {\r\n            font-size: 1rem;\r\n            transform: translateY(-2.2rem);\r\n          }\r\n        `}\r\n      />\r\n      <label\r\n        id=\"Inputlable\"\r\n        htmlFor=\"text\"\r\n        className={css`\r\n          font-family: \"Cabin\", sans-serif;\r\n          position: absolute;\r\n          cursor: text;\r\n          font-size: 1rem;\r\n          transform: translateY(-2.2rem);\r\n          margin-top: -0.5rem;\r\n          color: ${GetSetting(\"theme\").get(\"texttertiary\")};\r\n          user-select: none;\r\n          transition: 0.22s;\r\n        `}\r\n      >\r\n        Enter your text here\r\n      </label>\r\n      <input\r\n        type=\"button\"\r\n        value=\"GO\"\r\n        onMouseDown={handleSubmit}\r\n        className={css`\r\n          font-family: \"Cabin\", sans-serif;\r\n          color: ${GetSetting(\"theme\").get(\"texttertiary\")};\r\n          font-size: 1.7rem;\r\n          border-color: ${GetSetting(\"theme\").get(\"texttertiary\")};\r\n          border-radius: 5px;\r\n          border-style: solid;\r\n          background-color: transparent;\r\n          margin-left: 20px;\r\n          height: 55px;\r\n          width: 70px;\r\n          transition: 0.22s ease;\r\n          &:hover {\r\n            color: ${GetSetting(\"theme\").get(\"textprimary\")};\r\n            border-color: ${GetSetting(\"theme\").get(\"textprimary\")};\r\n          }\r\n        `}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Inputfield;\r\n","import React from \"react\";\r\nimport { css, cx } from \"@emotion/css\";\r\nimport { SetSetting, GetSetting } from \"../Settings\";\r\nimport Inputfield from \"../generic/Inputfield\";\r\n\r\nclass Entryfield extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      input: \"\",\r\n    };\r\n    this.SetInput = this.SetInput.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  SetInput(i) {\r\n    this.setState(() => ({\r\n      input: i,\r\n    }));\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    if (this.state.input !== \"\") {\r\n      event.preventDefault();\r\n      this.props.SetText(this.state.input);\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    //restore text after mounting\r\n    this.setState({\r\n      input: GetSetting(\"Entryfield\").get(\"input\"), //If text was in the entryfield but not set\r\n    });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this.state.input !== \"\") {\r\n      GetSetting(\"Entryfield\").set(\"input\", this.state.input);\r\n      GetSetting(\"Entryfield\").set(\"hidelable\", this.state.hidelable);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Inputfield\r\n        handleSubmit={this.handleSubmit}\r\n        input={this.state.input}\r\n        setinput={this.SetInput}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default Entryfield;\r\n","import React from \"react\";\nimport StaticElements from \"./StaticElements\";\nimport { SetSetting, GetSetting } from \"../Settings\";\nimport Entryfield from \"./Entryfield\";\nimport styled from \"@emotion/styled\";\nimport { css, cx } from \"@emotion/css\";\nimport Focusprompt from \"./Focusprompt\";\n\nclass DisplayText extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"\",\n      index: 0,\n      focus: false,\n      editprogress: false,\n    };\n    this.overwriteprogress = \"\";\n    this.words = [];\n    this.setIndex = this.setIndex.bind(this);\n    this.setText = this.setText.bind(this);\n    this.setFocused = this.setFocused.bind(this);\n    this.progressfocused = this.progressfocused.bind(this);\n    this.handleprogresskeyevent = this.handleprogresskeyevent.bind(this);\n    this.progressblurred = this.progressblurred.bind(this);\n    this.setIndexbyPercent = this.setIndexbyPercent.bind(this);\n  }\n\n  setIndex(i) {\n    this.setState({\n      index: i,\n    });\n  }\n\n  setText(t) {\n    this.setState({\n      text: t,\n    });\n    this.words = (t || \"\").split(\" \");\n    this.words = this.words.filter((item) => item !== \"\"); //avoid empty elements\n  }\n\n  setFocused(f) {\n    this.setState({\n      focus: f,\n    });\n  }\n\n  progress() {\n    return (\n      this.overwriteprogress ||\n      Math.floor((this.state.index / (this.words.length - 1)) * 100) ||\n      0\n    );\n  }\n\n  componentDidMount() {\n    this.setState({\n      index: GetSetting(\"index\"),\n      text: GetSetting(\"text\"),\n    });\n    this.words = (GetSetting(\"text\") || \"\").split(\" \");\n    this.words = this.words.filter((item) => item !== \"\"); //avoid empty elements\n  }\n\n  componentWillUnmount() {\n    SetSetting(\"text\", this.state.text);\n    SetSetting(\"index\", this.state.index);\n  }\n\n  progressfocused() {\n    if (!this.state.editprogress) {\n      this.setState({\n        editprogress: true,\n      });\n      this.overwriteprogress = \" \";\n    }\n  }\n\n  progressblurred() {\n    if (this.state.editprogress) {\n      this.setState({\n        editprogress: false,\n      });\n      this.overwriteprogress = \"\";\n    }\n  }\n\n  handleprogresskeyevent(e) {\n    if (\n      (e.keyCode > 47 && e.keyCode < 58) ||\n      (e.keyCode > 95 && e.keyCode < 106)\n    ) {\n      if (this.overwriteprogress.length < 3) {\n        //3 because of the space in the beginning of the string\n        this.overwriteprogress = this.overwriteprogress + e.key;\n      }\n    } else if (e.keyCode === 8) {\n      this.overwriteprogress = this.overwriteprogress.substr(\n        0,\n        this.overwriteprogress.length - 1\n      );\n      if (this.overwriteprogress.length < 1) {\n        this.overwriteprogress = \" \";\n      }\n    } else if (e.keyCode === 27) {\n      this.progressblurred();\n      document.activeElement.blur(); //blur element manually so it can be focused again\n    } else if (e.keyCode === 13) {\n      this.setIndexbyPercent(parseInt(this.overwriteprogress.substr(1)));\n\n      this.progressblurred();\n      document.activeElement.blur(); //blur element manually so it can be focused again\n    }\n    this.forceUpdate();\n  }\n\n  setIndexbyPercent(input) {\n    this.setIndex(Math.floor((input / 100) * this.words.length));\n  }\n\n  render() {\n    const Currentword = styled.h1`\n      color: ${GetSetting(\"theme\").get(\"textprimary\")};\n      font-family: \"Raleway\", sans-serif;\n      text-align: center;\n      font-size: 8.5rem;\n    `;\n\n    const NextWord = styled.h1`\n      color: ${GetSetting(\"theme\").get(\"textsecondary\")};\n      font-family: \"Raleway\", sans-serif;\n      text-align: center;\n      font-size: 5rem;\n    `;\n\n    const Progress = styled.h1`\n      color: ${GetSetting(\"theme\").get(\"textsecondary\")};\n      font-family: \"Raleway\", sans-serif;\n      text-align: right;\n      font-size: 5rem;\n      border-style: solid;\n      border-width: 3px;\n      border-color: ${this.state.editprogress\n        ? GetSetting(\"theme\").get(\"texttertiary\")\n        : \"transparent\"};\n      border-radius: 10px;\n      width: 180px;\n      transition: 0.2s;\n    `;\n    const { wpm } = this.props;\n\n    const delay = 60 / wpm;\n\n    const onFocus = () => this.setFocused(true);\n    const onBlur = () => {\n      this.setFocused(false);\n      stopcycle();\n    };\n\n    const onKeyDown = (e) => {\n      if (this.state.text !== \"\") {\n        //handle input pressed\n        if (this.state.editprogress) {\n          this.handleprogresskeyevent(e);\n        } else {\n          if (this.state.text !== \"\") {\n            if (e.repeat === false) {\n              //Space Action\n              if (e.keyCode === 32) {\n                cyclewords();\n              }\n              //Backspace Action\n              if (e.keyCode === 8) {\n                this.setIndex(0);\n              }\n              //Ctrl Action\n              if (e.keyCode === 17) {\n                this.setIndex(Math.max(this.state.index - 1, 0));\n              }\n              SetSetting(\"index\", this.state.index);\n            }\n          }\n        }\n      }\n    };\n    const onKeyUp = (e) => {\n      if (e.keyCode === 32) {\n        stopcycle();\n      }\n    };\n\n    const cyclewords = () => {\n      this.counter = setInterval(() => {\n        this.setIndex(Math.min(this.state.index + 1, this.words.length - 1));\n      }, delay * 1000);\n    };\n\n    const stopcycle = () => {\n      clearInterval(this.counter);\n    };\n\n    const nextwordhint = () => {\n      if (this.state.index + 1 < this.words.length) {\n        return this.words[this.state.index + 1];\n      } else {\n        return \"End of text reached\";\n      }\n    };\n\n    const SetTexthandler = (Text) => {\n      this.setText(Text);\n      SetSetting(\"text\", Text);\n    };\n\n    return (\n      <span>\n        {this.state.text !== \"\" ? (\n          <div\n            className={css`\n              background: ${GetSetting(\"theme\").get(\"textbox\")};\n              width: min(93.75rem, 93%);\n              height: 21.875rem;\n              border-radius: 5px;\n              position: absolute;\n              top: 50%;\n              left: 50%;\n              transform: translate(-50%, -50%);\n              outline: none;\n              display: grid;\n              grid-template-columns: 1fr 3fr 1fr;\n              align-items: center;\n              justify-items: center;\n              grid-template-rows: 21.875rem 10rem;\n            `}\n          >\n            <div\n              onKeyDown={onKeyDown}\n              onKeyUp={onKeyUp}\n              tabIndex=\"1\"\n              onFocus={onFocus}\n              onBlur={onBlur}\n              className={css`\n                grid-column-start: 1;\n                grid-column-end: 4;\n                outline: none;\n                width: 100%;\n              `}\n            >\n              <Currentword>{this.words[this.state.index]}</Currentword>\n              {/* <Focusprompt focused={this.state.focus} /> */}\n            </div>\n            <div>\n              <StaticElements />\n            </div>\n            <NextWord>{nextwordhint()}</NextWord>\n            <div\n              onFocus={this.progressfocused}\n              onBlur={this.progressblurred}\n              tabIndex=\"1\"\n              onKeyDown={this.handleprogresskeyevent}\n              className={css`\n                outline: none;\n              `}\n            >\n              <Progress>{this.progress() + \"%\"}</Progress>\n            </div>\n          </div>\n        ) : (\n          <Entryfield SetText={SetTexthandler} />\n        )}\n      </span>\n    );\n  }\n}\n\nexport default DisplayText;\n","export default __webpack_public_path__ + \"static/media/Settings.8f63e7d6.png\";","import React, { Suspense } from \"react\";\r\nimport { injectGlobal } from \"@emotion/css\";\r\nimport \"../css/App.css\";\r\nimport DisplayText from \"./DisplayTexts/component\";\r\nimport { SetSetting, GetSetting } from \"./Settings\";\r\nimport Settingsimg from \"../img/Settings.png\";\r\nimport { css, cx } from \"@emotion/css\";\r\n\r\nconst Settingspage = React.lazy(() => import(\"./Settingspage\"));\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inSettings: false,\r\n    };\r\n    this.ToggleSettings = this.ToggleSettings.bind(this);\r\n  }\r\n  ToggleSettings() {\r\n    this.setState((state) => ({\r\n      inSettings: !state.inSettings,\r\n    }));\r\n  }\r\n  render() {\r\n    //console.log(this.state.inSettings)\r\n    injectGlobal`\r\n        body {\r\n            background: ${GetSetting(\"theme\").get(\"bg\")};\r\n        }\r\n        `;\r\n    return (\r\n      <div className=\"App\">\r\n        <header>\r\n          <button\r\n            type=\"button\"\r\n            className=\"Settingsbutton\"\r\n            onMouseDown={this.ToggleSettings}\r\n          >\r\n            <img src={Settingsimg} alt=\"Settings\" height=\"50\" width=\"50\" />\r\n          </button>\r\n        </header>\r\n        <section>\r\n          {this.state.inSettings ? (\r\n            <Suspense fallback={<div>Loading...</div>}>\r\n              <Settingspage />\r\n            </Suspense>\r\n          ) : (\r\n            <DisplayText wpm={500} /> //TODO add WPM user Control\r\n          )}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}